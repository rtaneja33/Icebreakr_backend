{
  "service": {
    "service": "iceBreaker",
    "serviceObject": {
      "name": "iceBreaker"
    },
    "provider": {
      "stage": "production",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "runtime": "nodejs12.x",
      "environment": {
        "FIREBASE_CLIENT_EMAIL": "firebase-adminsdk-cusce@dev-ice-breaker.iam.gserviceaccount.com",
        "FIREBASE_PRIVATE_KEY": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDMb7qH+yp6w6Lp\nkXauHL7/okj/B848cLG7V2NocDaf1hCGxgb2JTYsqjKuJtdNBvRFTbMMrhJsziao\nZQHJxlRQRaM7g3B+Z0NUvO940RswGMDWrcUCL/BnkWu20u9FUF/EXe+NTSVms+oW\n/Lm+mnUObdJlyo+W4aMYNCaf/81AEkR2JM/ailxB7CqDFZEn2shN1Y804NByoF8A\niILmIuVee7LZ98RGJ5r1raryqtt2z5/FdUk9CVbN4SpFSwEJxHYpN50rz+Oe/yBP\nJrCPsMxy/DVemqxUPFO7PIy3R/0s1KWWGvSEFwJK49KcXl2OgbO/FTWu03LlKEMu\n6m7ax0alAgMBAAECggEAHDEwNP5jA55PrLa9pLxxbnP6bbOth3zhqvxzHfzo24Pm\nsDSbfdLwie+dS5Iu+1VWgZQkeT7WwEscM6QHlMQVQ83xTmINiluX18CyTs6aBDj1\npuU8bNUgPvgOivNtwaOYK/k+8Wp5Gj+nVteFOeQM+RoV+1RCwZjeJ+v72PFVZFyh\nM7lSfUnEAtINrMKWtknEa5aSHN1mAFSEq9iBt+AG5Jg1d5wmsvdgG0LD7K2J49pj\nseb2Go2HIkRC15xPmapBCfLuNVSoNAVod4MIQ4H99QxD4CDik7Uathod0bBPBrC9\nU7wrOmUCJWr0g3/1CplqJ3YTDeNuj5DLwq6R39ompQKBgQD5r6Bsr8oHsboq2g03\nA56eTvMbZEa5Spj54UnUb9GYY+1J/CrgC52Vh+/HB2LHa9A8+txaBABoq1nZ9EvG\nflumdBIcJZ2bouvOP+VMKGriIGdDJLuS+nBVHh7h2iJnpG/MVIvvHMmgRQiHTU6r\nozAnb/pjn2UfEmHB94uGWky7LwKBgQDRmyxQ7T018fvh1qE97rRSQWwf7fYdmn0R\n9z5fcOVKi0LOWpFevB5aN+hFIWPIqBqesUFl2LV9skMJKlZVk901+isKvysXFZut\nUYYd/44pWLjk2Fe/UuAfV9rBJJmYns5tn4U/7YDwiYp0OhPOSTclWQ8/vTv9MYGI\nCerNsZEWawKBgQCoK6dkrP3pMsaOSDFwZWq3e7t4LpEICfuBCkF86ReFiYBwPXzv\nTEOGTHmuVwYsBSzLdbdmlZ1k4kxxZX6IIeE++pycAqXmBtTGJPke03Yx+dszORFx\njGaOnev0+MQFhJacTDG4Cm6vGPAGmYYsSoyLc3t1EA2+4NWhHEcIZdealwKBgQCi\nToJWeB5581OUYVqiVoETYM2VO/LkoYhPrSCDTyx+OLAWklMXBJyMR9Z4EY7vBhz2\n3VNCxjhjiPIX2szXn5QgBAPoYne/fF/8KbCs8gLnSWiC7HOmF0qtep5OCUVWxUIb\n6PaJtiOuHxMzRPWpO1CUfw4r0SDuwrMG4IcNmH482QKBgD3HaDKEpIVVfWj1h/4m\nIFXHo+MDR2JR564o1ryg1tmeRZtus98rfbKI+rCOk3W0CWyMLNRgqzV4PYkzjnnz\nNSFlkSf/YjLSNnrAdna9DcIV2fxz4gUbG24nxo+XvbbogqcCDyTmLH1mgCrR/shh\nCQFi5y60w6UUqUqGufSHYjNA\n-----END PRIVATE KEY-----\n",
        "FIREBASE_PROJECT_ID": "dev-ice-breaker",
        "MONGODB_URL": "mongodb+srv://admin:82RiXmQScxPoSwCP@ice-breaker-dev-xebye.mongodb.net/ice-breaker",
        "APP_NAME": "iceBreaker",
        "ONE_SIGNAL_APP_ID": "bb5f3fec-8c40-4248-b21f-d1002b937e9d",
        "ONE_SIGNAL_API_KEY": "NzM5NWMwNTMtNGNiNC00YzAzLThkZTktOWQzOGFjMmI4YjRi",
        "DEFAULT_DISTANCE": 10,
        "METERS_PER_MILE": 1609.34
      },
      "region": "us-east-1",
      "versionFunctions": false,
      "vpc": {},
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            },
            "DependsOn": []
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "production",
                        "iceBreaker",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": [
                              "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/iceBreaker-production*:*",
                              {}
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": [
                              "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/iceBreaker-production*:*:*",
                              {}
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "iceBreaker",
                    "production",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            },
            "DependsOn": []
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "production-iceBreaker",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            },
            "DependsOn": []
          },
          "ApiGatewayDeployment1583912406300": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "production"
            },
            "DependsOn": [
              "UsersNestedStack",
              "GlobalsNestedStack"
            ]
          },
          "AuthorizerNestedStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
              "Parameters": {
                "IamRoleLambdaExecutionArnParameter": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "ServerlessDeploymentBucketParameter": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "ApiGatewayRestApiParameter": {
                  "Ref": "ApiGatewayRestApi"
                }
              },
              "TemplateURL": {
                "Fn::Join": [
                  "/",
                  [
                    "https://s3.amazonaws.com",
                    {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "serverless/iceBreaker/production/1583912444126-2020-03-11T07:40:44.126Z",
                    "cloudformation-template-Authorizer-nested-stack.json"
                  ]
                ]
              }
            },
            "DependsOn": [
              "IamRoleLambdaExecution",
              "ServerlessDeploymentBucket",
              "ApiGatewayRestApi"
            ]
          },
          "GlobalsNestedStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
              "Parameters": {
                "IamRoleLambdaExecutionArnParameter": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "ServerlessDeploymentBucketParameter": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "ApiGatewayRestApiParameter": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiGatewayRestApiRootResourceIdParameter": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "AuthorizerApiGatewayAuthorizerParameter": {
                  "Fn::GetAtt": [
                    "AuthorizerNestedStack",
                    "Outputs.AuthorizerApiGatewayAuthorizer"
                  ]
                }
              },
              "TemplateURL": {
                "Fn::Join": [
                  "/",
                  [
                    "https://s3.amazonaws.com",
                    {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "serverless/iceBreaker/production/1583912444126-2020-03-11T07:40:44.126Z",
                    "cloudformation-template-Globals-nested-stack.json"
                  ]
                ]
              }
            },
            "DependsOn": [
              "IamRoleLambdaExecution",
              "ServerlessDeploymentBucket",
              "ApiGatewayRestApi",
              "AuthorizerNestedStack"
            ]
          },
          "UsersNestedStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
              "Parameters": {
                "IamRoleLambdaExecutionArnParameter": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "ServerlessDeploymentBucketParameter": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "ApiGatewayRestApiParameter": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiGatewayRestApiRootResourceIdParameter": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "AuthorizerApiGatewayAuthorizerParameter": {
                  "Fn::GetAtt": [
                    "AuthorizerNestedStack",
                    "Outputs.AuthorizerApiGatewayAuthorizer"
                  ]
                }
              },
              "TemplateURL": {
                "Fn::Join": [
                  "/",
                  [
                    "https://s3.amazonaws.com",
                    {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "serverless/iceBreaker/production/1583912444126-2020-03-11T07:40:44.126Z",
                    "cloudformation-template-Users-nested-stack.json"
                  ]
                ]
              }
            },
            "DependsOn": [
              "IamRoleLambdaExecution",
              "ServerlessDeploymentBucket",
              "ApiGatewayRestApi",
              "AuthorizerNestedStack"
            ]
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/production"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "authorizer": {
        "name": "authorizer",
        "resultTtlInSeconds": 0,
        "identitySource": "method.request.header.Authorization",
        "type": "token"
      },
      "cors": {
        "origin": "*",
        "headers": [
          "Content-Type",
          "X-Amz-Date",
          "Authorization",
          "X-Api-Key",
          "X-Amz-Security-Token",
          "X-Amz-User-Agent",
          "Accept-Encoding",
          "Content-Encoding"
        ],
        "methods": [
          "OPTIONS",
          "PUT",
          "GET",
          "POST"
        ],
        "allowCredentials": false
      },
      "splitStacks": {
        "nestedStackCount": 20,
        "perFunction": true,
        "perType": false,
        "perGroupFunction": false,
        "stackConcurrency": 5,
        "resourceConcurrency": 10
      }
    },
    "plugins": [
      "serverless-plugin-typescript",
      "serverless-offline",
      "serverless-plugin-split-stacks"
    ],
    "pluginsData": {},
    "functions": {
      "authorizer": {
        "handler": "authorizer/handler.authorize",
        "events": [],
        "name": "iceBreaker-production-authorizer",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {}
      },
      "users": {
        "handler": "users/server.handler",
        "events": [
          {
            "http": {
              "path": "me",
              "method": "put",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/getMyData",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "users/getUserProfile/{proxy+}",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/sendFriendRequest/{proxy+}",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/respondToFriendRequest",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/getFriends",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/removeFromFriends/{proxy+}",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/getNearbyUsers",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/getSuggestionContacts",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/notifications",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/markAllNotificationsRead",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/readMyNotification/{proxy+}",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/logUserActivity",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/updateLocation",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/sendMessage",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/getMySentMessages",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/getMessagesSentToMe",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/getAllMyMessages",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/getAllUsers",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "me/uploadProfileImage",
              "method": "post",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "iceBreaker-production-users",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {}
      },
      "globals": {
        "handler": "globals/server.handler",
        "events": [
          {
            "http": {
              "path": "globals/configurations",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "globals/settings",
              "method": "get",
              "cors": {
                "$ref": "$[\"service\"][\"custom\"][\"cors\"]"
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": {
                  "Fn::GetAtt": [
                    "AuthorizerLambdaFunction",
                    "Arn"
                  ]
                },
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "iceBreaker-production-globals",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": []
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {}
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "artifact": "/Users/sathimandal/ice-breaker/trunk/icebreaker.backend/sfr-serverless/.build/.serverless/iceBreaker.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/iceBreaker/production/1583912444126-2020-03-11T07:40:44.126Z",
    "artifact": "iceBreaker.zip"
  }
}