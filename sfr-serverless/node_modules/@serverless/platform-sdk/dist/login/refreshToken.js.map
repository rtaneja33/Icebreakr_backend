{"version":3,"sources":["../../src/login/refreshToken.js"],"names":["utils","refreshToken","configFile","readConfigFile","currentId","userId","users","dashboard","Number","expiresAt","Date","now","body","JSON","stringify","platformConfig","backendUrl","method","response","json","tokens","expires_in","idToken","id_token","accessToken","access_token","writeConfigFile","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;IAAYA,K;;;;;;;;AAEZ,IAAMC;AAAA,qEAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,sBADa,GACAF,MAAMG,cAAN,EADA;AAEbC,qBAFa,GAEDF,WAAWG,MAFV;;AAAA,gBAGdH,WAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCN,YAHxB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAQfO,OAAON,WAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCE,SAA7C,IAA0DC,KAAKC,GAAL,EAR3C;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAYbC,gBAZa,GAYNC,KAAKC,SAAL,CAAe,EAAEb,cAAcC,WAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCN,YAAtD,EAAf,CAZM;AAAA;AAAA,mBAaI,qBAAO,GAAEc,iBAAeC,UAAW,gBAAnC,EAAoD;AACzEC,sBAAQ,MADiE;AAEzEL;AAFyE,aAApD,CAbJ;;AAAA;AAabM,oBAba;AAAA;AAAA,mBAkBEA,SAASC,IAAT,EAlBF;;AAAA;AAkBbC,kBAlBa;AAmBbX,qBAnBa,GAmBDW,OAAOC,UAAP,GAAoB,IAApB,GAA2BX,KAAKC,GAAL,EAnB1B;;AAoBnBT,uBAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCe,OAAtC,GAAgDF,OAAOG,QAAvD;AACArB,uBAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCiB,WAAtC,GAAoDJ,OAAOK,YAA3D;AACAvB,uBAAWI,KAAX,CAAiBF,SAAjB,EAA4BG,SAA5B,CAAsCE,SAAtC,GAAkDA,SAAlD;AACAT,kBAAM0B,eAAN,CAAsBxB,UAAtB;;AAvBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AA0BAyB,OAAOC,OAAP,GAAiB3B,YAAjB","file":"refreshToken.js","sourcesContent":["import fetch from '../fetch'\nimport platformConfig from '../config'\nimport * as utils from '../utils'\n\nconst refreshToken = async () => {\n  const configFile = utils.readConfigFile()\n  const currentId = configFile.userId\n  if (!configFile.users[currentId].dashboard.refreshToken) {\n    return\n  }\n\n  // id token not expired, no need to renew\n  if (Number(configFile.users[currentId].dashboard.expiresAt) > Date.now()) {\n    return\n  }\n\n  const body = JSON.stringify({ refreshToken: configFile.users[currentId].dashboard.refreshToken })\n  const response = await fetch(`${platformConfig.backendUrl}tokens/refresh`, {\n    method: 'POST',\n    body\n  })\n\n  const tokens = await response.json()\n  const expiresAt = tokens.expires_in * 1000 + Date.now()\n  configFile.users[currentId].dashboard.idToken = tokens.id_token\n  configFile.users[currentId].dashboard.accessToken = tokens.access_token\n  configFile.users[currentId].dashboard.expiresAt = expiresAt\n  utils.writeConfigFile(configFile)\n}\n\nmodule.exports = refreshToken\n"]}