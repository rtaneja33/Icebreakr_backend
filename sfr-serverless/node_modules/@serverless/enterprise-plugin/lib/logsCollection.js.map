{"version":3,"sources":["../../lib/logsCollection.js"],"names":["require","pickResourceType","upperFirst","API_GATEWAY_FILTER_PATTERN","LAMBDA_FILTER_PATTERN","getAccessKeyForTenant","getLogDestination","module","exports","ctx","sls","service","custom","enterprise","collectLambdaLogs","cli","log","template","provider","compiledCloudFormationTemplate","logGroups","length","accessKey","tenant","request","Account","destinationOpts","appUid","tenantUid","serviceName","getServiceName","stageName","getStage","regionName","getRegion","accountId","destinationArn","e","message","includes","Error","Object","keys","logGroupIndex","logGroupKey","key","logGroupName","resource","Properties","LogGroupName","filterPattern","startsWith","Resources","Type","DestinationArn","FilterPattern","Ref"],"mappings":"AAAA;AAEA;;;;;;;;;;iBAWIA,OAAO,CAAC,SAAD,C;MAJTC,gB,YAAAA,gB;MACAC,U,YAAAA,U;MACAC,0B,YAAAA,0B;MACAC,qB,YAAAA,qB;;kBAGmDJ,OAAO,CAAC,0BAAD,C;MAApDK,qB,aAAAA,qB;MAAuBC,iB,aAAAA,iB;;AAE/BC,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,+BAAiB,WAAMC,GAAN,EAAa;AAC5B,QACEA,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,IACAH,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UADvB,IAEAJ,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,UAAvB,CAAkCC,iBAAlC,KAAwD,KAH1D,EAIE;AACAL,MAAAA,GAAG,CAACC,GAAJ,CAAQK,GAAR,CAAYC,GAAZ,CAAgB,iEAAhB;AACA;AACD;;AAED,UAAMC,QAAQ,GAAGR,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBO,QAAhB,CAAyBC,8BAA1C,CAV4B,CAY5B;;AACA,UAAMC,SAAS,GAAGnB,gBAAgB,CAACgB,QAAD,EAAW,qBAAX,CAAlC;;AACA,QAAIG,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B;AACD;;AAED,UAAMC,SAAS,SAASjB,qBAAqB,CAACI,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBY,MAAjB,CAA7C;;AAlB4B,wBAmBFd,GAAG,CAACS,QAAJ,CAAaM,OAAb,CAAqB,KAArB,EAA4B,mBAA5B,EAAiD,EAAjD,CAnBE;AAAA,UAmBpBC,OAnBoB,SAmBpBA,OAnBoB;;AAoB5B,UAAMC,eAAe,GAAG;AACtBJ,MAAAA,SADsB;AAEtBK,MAAAA,MAAM,EAAElB,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBgB,MAFF;AAGtBC,MAAAA,SAAS,EAAEnB,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBiB,SAHL;AAItBC,MAAAA,WAAW,EAAEpB,GAAG,CAACC,GAAJ,CAAQC,OAAR,CAAgBmB,cAAhB,EAJS;AAKtBC,MAAAA,SAAS,EAAEtB,GAAG,CAACS,QAAJ,CAAac,QAAb,EALW;AAMtBC,MAAAA,UAAU,EAAExB,GAAG,CAACS,QAAJ,CAAagB,SAAb,EANU;AAOtBC,MAAAA,SAAS,EAAEV;AAPW,KAAxB;AAUA,QAAIW,cAAJ;;AAEA,QAAI;AAAA,wBAC0B9B,iBAAiB,CAACoB,eAAD,CAD3C;;AACCU,MAAAA,cADD,SACCA,cADD;AAEH,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,UAAIA,CAAC,CAACC,OAAF,IAAaD,CAAC,CAACC,OAAF,CAAUC,QAAV,CAAmB,yBAAnB,CAAjB,EAAgE;AAC9D9B,QAAAA,GAAG,CAACC,GAAJ,CAAQK,GAAR,CAAYC,GAAZ,CACG,sDAAqDP,GAAG,CAACS,QAAJ,CAAagB,SAAb,EAAyB,EADjF;AAGA;AACD;;AACD,YAAM,IAAIM,KAAJ,CAAUH,CAAC,CAACC,OAAZ,CAAN;AACD,KA1C2B,CA4C5B;;;AACA,oCAA4BG,MAAM,CAACC,IAAP,CAAYtB,SAAZ,CAA5B,kCAAoD;AAA/C,YAAMuB,aAAa,mBAAnB;AACH,YAAMC,WAAW,GAAGxB,SAAS,CAACuB,aAAD,CAAT,CAAyBE,GAA7C;AACA,YAAMC,YAAY,GAAG1B,SAAS,CAACuB,aAAD,CAAT,CAAyBI,QAAzB,CAAkCC,UAAlC,CAA6CC,YAAlE;AAEA,YAAMC,aAAa,GAAGJ,YAAY,CAACK,UAAb,CAAwB,mBAAxB,IAClBhD,0BADkB,GAElBC,qBAFJ;AAIAa,MAAAA,QAAQ,CAACmC,SAAT,CAAoB,mCAAkClD,UAAU,CAAC0C,WAAD,CAAc,EAA9E,IAAmF;AACjFS,QAAAA,IAAI,EAAE,+BAD2E;AAEjFL,QAAAA,UAAU,EAAE;AACVM,UAAAA,cAAc,EAAElB,cADN;AAEVmB,UAAAA,aAAa,EAAEL,aAFL;AAGVD,UAAAA,YAAY,EAAE;AACZO,YAAAA,GAAG,EAAEZ;AADO;AAHJ;AAFqE,OAAnF;AAUD;AACF,GAhED;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["'use strict';\n\n/*\n * Logs Collection\n * - Collects `SERVERLESS PLATFORM || REPORT` from lambda logs\n * - Collects `sls-access-logs` from API Gateway access logs\n */\n\nconst {\n  pickResourceType,\n  upperFirst,\n  API_GATEWAY_FILTER_PATTERN,\n  LAMBDA_FILTER_PATTERN,\n} = require('./utils');\n\nconst { getAccessKeyForTenant, getLogDestination } = require('@serverless/platform-sdk');\n\nmodule.exports = async ctx => {\n  if (\n    ctx.sls.service.custom &&\n    ctx.sls.service.custom.enterprise &&\n    ctx.sls.service.custom.enterprise.collectLambdaLogs === false\n  ) {\n    ctx.sls.cli.log('Info: This plugin is not configured to collect AWS Lambda Logs.');\n    return;\n  }\n\n  const template = ctx.sls.service.provider.compiledCloudFormationTemplate;\n\n  // Gather possible targets\n  const logGroups = pickResourceType(template, 'AWS::Logs::LogGroup');\n  if (logGroups.length === 0) {\n    return;\n  }\n\n  const accessKey = await getAccessKeyForTenant(ctx.sls.service.tenant);\n  const { Account } = await ctx.provider.request('STS', 'getCallerIdentity', {});\n  const destinationOpts = {\n    accessKey,\n    appUid: ctx.sls.service.appUid,\n    tenantUid: ctx.sls.service.tenantUid,\n    serviceName: ctx.sls.service.getServiceName(),\n    stageName: ctx.provider.getStage(),\n    regionName: ctx.provider.getRegion(),\n    accountId: Account,\n  };\n\n  let destinationArn;\n\n  try {\n    ({ destinationArn } = await getLogDestination(destinationOpts));\n  } catch (e) {\n    if (e.message && e.message.includes('not supported in region')) {\n      ctx.sls.cli.log(\n        `Warning: Lambda log collection is not supported in ${ctx.provider.getRegion()}`\n      );\n      return;\n    }\n    throw new Error(e.message);\n  }\n\n  // For each log group, set up subscription\n  for (const logGroupIndex of Object.keys(logGroups)) {\n    const logGroupKey = logGroups[logGroupIndex].key;\n    const logGroupName = logGroups[logGroupIndex].resource.Properties.LogGroupName;\n\n    const filterPattern = logGroupName.startsWith('/aws/api-gateway/')\n      ? API_GATEWAY_FILTER_PATTERN\n      : LAMBDA_FILTER_PATTERN;\n\n    template.Resources[`CloudWatchLogsSubscriptionFilter${upperFirst(logGroupKey)}`] = {\n      Type: 'AWS::Logs::SubscriptionFilter',\n      Properties: {\n        DestinationArn: destinationArn,\n        FilterPattern: filterPattern,\n        LogGroupName: {\n          Ref: logGroupKey,\n        },\n      },\n    };\n  }\n};\n"],"file":"logsCollection.js"}