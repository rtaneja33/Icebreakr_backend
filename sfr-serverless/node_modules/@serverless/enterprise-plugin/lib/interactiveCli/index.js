'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const chalk = require('chalk');

const register = require('./register');

const setApp = require('./set-app');

module.exports = serverless => {
  if (!serverless.interactiveCli) return null;
  return {
    'after:interactiveCli:setupAws': function () {
      var _afterInteractiveCliSetupAws = _asyncToGenerator(function* () {
        const registerCheck = yield register.check(serverless);

        if (registerCheck) {
          process.stdout.write('\n');
          yield register.run(serverless, registerCheck);
        }

        const setAppCheck = yield setApp.check(serverless);

        if (setAppCheck) {
          process.stdout.write('\n');
          yield setApp.run(serverless, setAppCheck);
        }

        if (serverless.service.app && serverless.service.tenant) {
          process.stdout.write(`
${chalk.green('Your project is setup for monitoring, troubleshooting and testing')}

${chalk.bold('Deploy your project and monitor, troubleshoot and test it:')}
- Run “serverless deploy” to deploy your service.
- Run “serverless dashboard” to view the dashboard.

`);
        }
      });

      function afterInteractiveCliSetupAws() {
        return _afterInteractiveCliSetupAws.apply(this, arguments);
      }

      return afterInteractiveCliSetupAws;
    }()
  };
};
//# sourceMappingURL=index.js.map