'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const _require = require('@serverless/platform-sdk'),
      createApp = _require.createApp,
      createAccessKeyForTenant = _require.createAccessKeyForTenant,
      getApps = _require.getApps,
      getLoggedInUser = _require.getLoggedInUser,
      listTenants = _require.listTenants,
      refreshToken = _require.refreshToken,
      writeConfigFile = _require.writeConfigFile;

const enableConfirm = require('./enableConfirm');

const writeTenantAndApp = require('./writeTenantAndApp');

const isValidAppName = RegExp.prototype.test.bind(/^[a-z0-9](?:[a-z0-9-]{0,126}[a-z0-9])?$/);

const tenantsChoice =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (inquirer, tenantNames) {
    return (yield inquirer.prompt({
      message: 'What tenant do you want to add this to?',
      type: 'list',
      name: 'tenantName',
      choices: Array.from(tenantNames)
    })).tenantName;
  });

  return function tenantsChoice(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

const appNameChoice =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(function* (inquirer, appNames) {
    return (yield inquirer.prompt({
      message: 'What application do you want to add this to?',
      type: 'list',
      name: 'appName',
      choices: Array.from(appNames).concat({
        name: '[create a new app]',
        value: '_create_'
      })
    })).appName;
  });

  return function appNameChoice(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

const appNameInput =
/*#__PURE__*/
function () {
  var _ref3 = _asyncToGenerator(function* (inquirer, appNames) {
    return (yield inquirer.prompt({
      message: 'What do you want to name this application?',
      type: 'input',
      name: 'appName',
      validate: input => {
        input = input.trim();

        if (!isValidAppName(input)) {
          return 'App name is not valid.\n' + '   - It should only contain lowercase alphanumeric and hyphens.\n' + '   - It should start and end with an alphanumeric character.\n' + "   - Shouldn't exceed 128 characters";
        }

        if (appNames.includes(input)) return 'App of this name already exists';
        return true;
      }
    })).appName.trim();
  });

  return function appNameInput(_x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();

module.exports = {
  check(serverless) {
    return _asyncToGenerator(function* () {
      if (!serverless.config.servicePath) return false;
      if (serverless.service.provider.name !== 'aws') return false;
      if (serverless.service.tenant && serverless.service.app) return false;
      let user = getLoggedInUser();
      let tenants = new Set();

      if (!user) {
        return false;
      } else if (!user.idToken) {
        for (var _i = 0, _Object$keys = Object.keys(user.accessKeys); _i < _Object$keys.length; _i++) {
          const tenant = _Object$keys[_i];
          tenants.add(tenant);
        }
      } else {
        yield refreshToken();
        user = getLoggedInUser();
        tenants = new Set((yield listTenants({
          username: user.username,
          idToken: user.idToken
        })).map(tenant => tenant.tenantName));
      }

      if (!tenants.size) return false;
      return {
        user,
        tenants
      };
    })();
  },

  run(serverless, {
    user,
    tenants
  }) {
    return _asyncToGenerator(function* () {
      const inquirer = serverless.interactiveCli.inquirer;

      if (!serverless.service.tenant) {
        if (!(yield enableConfirm(inquirer))) return null;
      }

      const tenantName = yield _asyncToGenerator(function* () {
        if (tenants.size === 1) return tenants.values().next().value;

        if (serverless.service.tenant && tenants.has(serverless.service.tenant)) {
          return serverless.service.tenant;
        }

        return tenantsChoice(inquirer, tenants);
      })();
      let token;

      if (user.accessKeys && user.accessKeys[tenantName]) {
        token = user.accessKeys[tenantName];
      } else {
        token = yield createAccessKeyForTenant(tenantName);
        yield writeConfigFile({
          users: {
            [user.userId]: {
              dashboard: {
                accessKeys: {
                  [tenantName]: token
                }
              }
            }
          }
        });
      }

      const apps = yield getApps({
        tenant: tenantName,
        token
      });
      const appName = yield _asyncToGenerator(function* () {
        const appNames = apps.map(app => app.appName);

        if (serverless.service.app && appNames.includes(serverless.service.app)) {
          return serverless.service.app;
        }

        if (apps.length) {
          const chosenAppName = yield appNameChoice(inquirer, appNames);
          if (chosenAppName !== '_create_') return chosenAppName;
        }

        const newAppName = yield appNameInput(inquirer, appNames);
        return (yield createApp({
          tenant: tenantName,
          app: newAppName,
          token
        })).appName;
      })();
      return writeTenantAndApp(serverless, tenantName, appName);
    })();
  }

};
//# sourceMappingURL=set-app.js.map